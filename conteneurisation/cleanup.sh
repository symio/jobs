#!/bin/bash
set -e

echo "ğŸ§¹ Nettoyage de l'environnement Docker"
echo "======================================="

# Charge le .env pour obtenir le nom du projet
if [ -f .env ]; then
    set -a
    source .env
    set +a
else
    echo "Fichier .env introuvable"
    exit 1
fi

PROJECT_NAME=${COMPOSE_PROJECT_NAME:-jobs}

echo ""
echo "ğŸ“‹ Projet dÃ©tectÃ© : $PROJECT_NAME"
echo ""
echo "Cette action va :"
echo "  ArrÃªter tous les conteneurs de $PROJECT_NAME"
echo "  Supprimer tous les conteneurs de $PROJECT_NAME"
echo "  Supprimer tous les volumes de donnÃ©es de $PROJECT_NAME"
echo "  /!\ TOUTES LES DONNÃ‰ES DE LA BASE SERONT PERDUES !"
echo ""

read -p "ÃŠtes-vous sÃ»r de vouloir continuer ? (yes/N): " confirm

if [[ ! $confirm == "yes" ]]; then
    echo "Nettoyage annulÃ©."
    exit 0
fi

echo ""
echo "ğŸ›‘ ArrÃªt des conteneurs..."
docker compose down -v

echo ""
echo "Suppression des conteneurs orphelins..."
docker ps -a --filter "name=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker rm -f 2>/dev/null || true

echo ""
echo "Suppression des volumes..."
docker volume ls --filter "name=${PROJECT_NAME}" --format "{{.Name}}" | xargs -r docker volume rm 2>/dev/null || true

echo ""
echo "Suppression du rÃ©seau..."
docker network ls --filter "name=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker network rm 2>/dev/null || true

echo ""
echo "âœ… Nettoyage terminÃ© !"
echo ""
echo "ğŸ’¡ Pour redÃ©marrer proprement :"
echo "   ./build-and-run.sh"